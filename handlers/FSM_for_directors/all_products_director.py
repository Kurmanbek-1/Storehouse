from aiogram import types, Dispatcher
from config import POSTGRES_URL, bot, Director
from db.utils import get_product_from_category, get_product_photos
from db.ORM import delete_product
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from aiogram.dispatcher.filters import Text
import asyncpg
import buttons

from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext

# =======================================================================================================================
class all_products_director_fsm(StatesGroup):
    category = State()
    more_tovars = State()


async def fsm_start(message: types.Message):
    if message.from_user.id in Director:
        await all_products_director_fsm.category.set()
        await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞?", reply_markup=buttons.CategoryButtonsDirector)
    else:
        await message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω!')


"""–í—ã–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
async def load_category(message: types.Message, state: FSMContext):
    if message.from_user.id in Director:
        if message.text.startswith("/"):
            category = message.text.replace("/", "")
            pool = await asyncpg.create_pool(POSTGRES_URL)
            products = await get_product_from_category(pool, category)

            if products:
                if len(products) <= 5:
                    for product in products:
                        product_info = (
                            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {product['info']}\n"
                            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product['category']}\n"
                            f"–ê—Ä—Ç–∏–∫—É–ª: {product['article_number']}\n"
                            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product['quantity']}\n"
                            f"–¶–µ–Ω–∞: {product['price']}"
                        )

                        keyboard = InlineKeyboardMarkup().add(
                            InlineKeyboardButton(
                                f"–£–¥–∞–ª–∏—Ç—å",
                                callback_data=f"delete_product{product['id']}"
                            )
                        )

                        photos = await get_product_photos(pool, product['id'])
                        photo_urls = [photo['photo'] for photo in photos]
                        media_group = [types.InputMediaPhoto(media=image) for image in photo_urls]

                        await bot.send_media_group(chat_id=message.chat.id, media=media_group)
                        await bot.send_message(chat_id=message.chat.id, text=product_info, reply_markup=keyboard)

                    await state.finish()
                    await message.answer(f"–≠—Ç–æ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}",
                                         reply_markup=buttons.StartDirector)
                    await message.answer("–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–£–¥–∞–ª–∏—Ç—å' –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
                else:
                    chunks = [products[i:i + 5] for i in range(0, len(products), 5)]
                    data = await state.get_data()
                    current_chunk = data.get("current_chunk", 0)
                    current_products = chunks[current_chunk]

                    for product in current_products:
                        product_info = (
                            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {product['info']}\n"
                            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product['category']}\n"
                            f"–ê—Ä—Ç–∏–∫—É–ª: {product['article_number']}\n"
                            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product['quantity']}\n"
                            f"–¶–µ–Ω–∞: {product['price']}"
                        )

                        keyboard = InlineKeyboardMarkup().add(
                            InlineKeyboardButton(
                                f"–£–¥–∞–ª–∏—Ç—å",
                                callback_data=f"delete_product{product['id']}"
                            )
                        )

                        photos = await get_product_photos(pool, product['id'])
                        photo_urls = [photo['photo'] for photo in photos]
                        media_group = [types.InputMediaPhoto(media=image) for image in photo_urls]

                        await bot.send_media_group(chat_id=message.chat.id, media=media_group)
                        await bot.send_message(chat_id=message.chat.id, text=product_info, reply_markup=keyboard)

                    await state.update_data(current_chunk=current_chunk + 1)

                    if current_chunk < len(chunks) - 1:
                        ShowMore = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
                        ShowMore.add(KeyboardButton(f'–ï—â—ë –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}'))
                        ShowMore.add(KeyboardButton('/–û—Ç–º–µ–Ω–∞üö´'))
                        await message.answer("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ?", reply_markup=ShowMore)
                        await message.answer("–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É (/–û—Ç–º–µ–Ω–∞üö´), "
                                             "–ª–∏–±–æ –≤—ã–≤–µ–¥–∏—Ç–µ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–æ –∫–æ–Ω—Ü–∞!")
                        await all_products_director_fsm.next()
            else:
                await message.answer("–í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
        else:
            category = message.text.split()[-1]
            pool = await asyncpg.create_pool(POSTGRES_URL)
            products = await get_product_from_category(pool, category)

            if products:
                chunks = [products[i:i + 5] for i in range(0, len(products), 5)]
                data = await state.get_data()
                current_chunk = data.get("current_chunk", 0)
                current_products = chunks[current_chunk]

                for product in current_products:
                    product_info = (
                        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {product['info']}\n"
                        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product['category']}\n"
                        f"–ê—Ä—Ç–∏–∫—É–ª: {product['article_number']}\n"
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product['quantity']}\n"
                        f"–¶–µ–Ω–∞: {product['price']}"
                    )

                    keyboard = InlineKeyboardMarkup().add(
                        InlineKeyboardButton(
                            f"–£–¥–∞–ª–∏—Ç—å",
                            callback_data=f"delete_product{product['id']}"
                        )
                    )

                    photos = await get_product_photos(pool, product['id'])
                    photo_urls = [photo['photo'] for photo in photos]
                    media_group = [types.InputMediaPhoto(media=image) for image in photo_urls]

                    await bot.send_media_group(chat_id=message.chat.id, media=media_group)
                    await bot.send_message(chat_id=message.chat.id, text=product_info, reply_markup=keyboard)

                await state.update_data(current_chunk=current_chunk + 1)

                if current_chunk < len(chunks) - 1:
                    ShowMore = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
                    ShowMore.add(KeyboardButton(f'–ï—â—ë –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}'))
                    ShowMore.add(KeyboardButton('/–û—Ç–º–µ–Ω–∞üö´'))
                    await message.answer("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ?", reply_markup=ShowMore)
                    await message.answer("–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É (/–û—Ç–º–µ–Ω–∞üö´), "
                                         "–ª–∏–±–æ –≤—ã–≤–µ–¥–∏—Ç–µ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–æ –∫–æ–Ω—Ü–∞!")
                    await all_products_director_fsm.more_tovars.set()
                else:
                    await state.finish()
                    await message.answer(f"–≠—Ç–æ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}",
                                         reply_markup=buttons.StartDirector)
                    await message.answer("–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–£–¥–∞–ª–∏—Ç—å' –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
            else:
                await message.answer("–í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")

    else:
        await message.answer('–í—ã –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä!')

async def complete_delete_product(call: types.CallbackQuery):
    product_id = call.data.replace("delete_product", "").strip()
    await delete_product(product_id)
    await call.message.reply(text="–£–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")


async def load_more(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await load_category(message, state)


async def cancel_reg(message: types.Message, state: FSMContext):
    if message.from_user.id in Director:
        current_state = await state.get_state()
        if current_state is not None:
            await state.finish()
            await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=buttons.StartDirector)
            await message.answer("–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–£–¥–∞–ª–∏—Ç—å' –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
    else:
        await message.answer('–í—ã –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä!')

# =======================================================================================================================
def register_all_products_director(dp: Dispatcher):
    dp.register_message_handler(cancel_reg, Text(equals="/–û—Ç–º–µ–Ω–∞üö´", ignore_case=True), state="*")
    dp.register_message_handler(fsm_start, commands=["–¢–æ–≤–∞—Ä—ã*", 'all_products_director'])
    dp.register_message_handler(load_category, state=all_products_director_fsm.category)
    for category in ["–û–±—É–≤—å", "–ù–∏–∂–Ω–µ–µ_–±–µ–ª—å–µ", "–ê–∫—Å—Å–µ—Å—É–∞—Ä—ã", "–í–µ—Ä—Ö–Ω—è—è_–æ–¥–µ–∂–¥–∞", "–®—Ç–∞–Ω—ã"]:
        dp.register_message_handler(load_more, Text(equals=f"–ï—â—ë –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}", ignore_case=True),
                                    state=all_products_director_fsm.more_tovars)
    dp.register_callback_query_handler(complete_delete_product,
                                       lambda call: call.data and call.data.startswith("delete_product"))
