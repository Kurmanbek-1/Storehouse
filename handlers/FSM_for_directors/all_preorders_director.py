from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import POSTGRES_URL, bot, Director
from db.utils import get_preorder_from_category, get_preorder_photos

import asyncpg
import buttons


# =======================================================================================================================

class all_preorders_director_fsm(StatesGroup):
    category = State()


async def fsm_start(message: types.Message):
    if message.from_user.id in Director:
        await all_preorders_director_fsm.category.set()
        await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞?", reply_markup=buttons.CategoryButtonsDirector)
    else:
        await message.answer('–í—ã –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä!')


"""–í—ã–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
async def load_category(message: types.Message, state: FSMContext):
    if message.from_user.id in Director:
        category = message.text.replace("/", "")
        pool = await asyncpg.create_pool(POSTGRES_URL)
        products = await get_preorder_from_category(pool, category)

        if products:
            for product in products:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–µ
                product_info = (
                    f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {product['info']}\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product['category']}\n"
                    f"–ê—Ä—Ç–∏–∫—É–ª: {product['preorder_article']}\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product['quantity']}\n"
                    f"–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: {product['product_release_date']}\n"
                    f"–¶–µ–Ω–∞: {product['price']}"
                )

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–≤–∞—Ä–∞
                photos = await get_preorder_photos(pool, product['id'])
                photo_urls = [photo['photo'] for photo in photos]

                media_group = [types.InputMediaPhoto(media=image) for image in photo_urls[:-1]]

                last_image = photo_urls[-1]
                last_media = types.InputMediaPhoto(media=last_image, caption=product_info)

                media_group.append(last_media)

                await bot.send_media_group(chat_id=message.chat.id,
                                           media=media_group)

        else:
            await message.answer("–í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–≤")
    else:
        await message.answer('–í—ã –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä!')


async def cancel_reg(message: types.Message, state: FSMContext):
    if message.from_user.id in Director:
        current_state = await state.get_state()
        if current_state is not None:
            await state.finish()
            await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=buttons.StartDirector)
    else:
        await message.answer('–í—ã –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä!')


# =======================================================================================================================
def register_all_preorders_director(dp: Dispatcher):
    dp.register_message_handler(cancel_reg, Text(equals="–û—Ç–º–µ–Ω–∞üö´", ignore_case=True), state="*")
    dp.register_message_handler(fsm_start, commands=["–ü—Ä–µ–¥–∑–∞–∫–∞–∑—ã*", 'all_preorders_director'])
    dp.register_message_handler(load_category, state=all_preorders_director_fsm.category)